pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: '要部署的镜像标签')
        string(name: 'FULL_IMAGE_NAME', defaultValue: '', description: '完整的镜像名称')
    }

    environment {
        // 如果有kubeconfig凭据，取消注释下一行
        // KUBECONFIG = credentials('kubeconfig')

        DOCKER_REGISTRY = '172.22.83.19:30003'
        IMAGE_NAMESPACE = 'nju14'
        IMAGE_NAME = 'hello-service'
        K8S_NAMESPACE = 'default'
        DEPLOYMENT_NAME = 'hello-service'
        PROJECT_DIR = "hello-service"
    }

    stages {
        stage('准备部署环境') {
            steps {
                echo "🚀 开始部署镜像: ${params.FULL_IMAGE_NAME}"
                echo "📦 镜像标签: ${params.IMAGE_TAG}"

                // 如果有kubeconfig，验证kubectl连接
                script {
                    try {
                        sh '''
                            echo "=== 验证Kubernetes连接 ==="
                            kubectl version --client
                            kubectl cluster-info
                            kubectl get nodes
                            echo "✅ K8s连接正常"
                        '''
                    } catch (Exception e) {
                        echo "⚠️ 无kubeconfig配置，将生成部署文件供手动部署"
                    }
                }
            }
        }

        stage('更新部署文件') {
            steps {
                echo '📝 更新Kubernetes部署文件...'
                script {
                    // 拉取最新代码以获取k8s配置文件
                    checkout scm

                    // ⭐ 关键：读取项目目录中的k8s文件
                    def deploymentYaml = readFile("${PROJECT_DIR}/k8s/deployment.yaml")

                    // 计算要使用的镜像
                    def imageToUse = params.FULL_IMAGE_NAME ?: "${DOCKER_REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${params.IMAGE_TAG}"

                    // 替换镜像地址
                    deploymentYaml = deploymentYaml.replaceAll('172.22.83.19:30003/nju14/hello-service:latest', imageToUse)

                    // 写入临时文件
                    writeFile file: 'deployment-updated.yaml', text: deploymentYaml

                    echo "✅ 部署文件更新完成"
                    echo "🐳 使用镜像: ${imageToUse}"

                    // 显示更新后的镜像配置
                    sh '''
                        echo "=== 验证镜像配置 ==="
                        grep -n "image:" deployment-updated.yaml || echo "未找到image配置"
                    '''
                }
            }
        }

        stage('部署到Kubernetes') {
            steps {
                echo '🎯 开始部署到Kubernetes集群...'
                script {
                    try {
                        sh '''
                            echo "=== 应用Kubernetes资源 ==="

                            # 部署应用
                            kubectl apply -f deployment-updated.yaml
                            echo "✅ Deployment已更新"

                            # 部署服务
                            kubectl apply -f ${PROJECT_DIR}/k8s/service.yaml
                            echo "✅ Service已更新"

                            # 部署监控配置
                            kubectl apply -f ${PROJECT_DIR}/k8s/servicemonitor.yaml
                            echo "✅ ServiceMonitor已更新"

                            # 部署HPA
                            kubectl apply -f ${PROJECT_DIR}/k8s/hpa.yaml
                            echo "✅ HPA已更新"

                            echo "🎉 所有Kubernetes资源部署完成"
                        '''
                    } catch (Exception e) {
                        echo "⚠️ kubectl部署失败，可能是kubeconfig未配置"
                        echo "📋 生成手动部署说明..."
                        sh '''
                            echo "=== 手动部署命令 ==="
                            echo "kubectl apply -f deployment-updated.yaml"
                            echo "kubectl apply -f ${PROJECT_DIR}/k8s/service.yaml"
                            echo "kubectl apply -f ${PROJECT_DIR}/k8s/servicemonitor.yaml"
                            echo "kubectl apply -f ${PROJECT_DIR}/k8s/hpa.yaml"
                        '''
                        // 归档部署文件
                        archiveArtifacts artifacts: 'deployment-updated.yaml,hello-service/k8s/*.yaml', fingerprint: true
                    }
                }
            }
        }

        stage('验证部署') {
            steps {
                echo '🔍 验证部署是否成功...'
                script {
                    try {
                        sh '''
                            echo "=== 检查服务状态 ==="
                            kubectl get svc ${DEPLOYMENT_NAME}
                            kubectl get svc ${DEPLOYMENT_NAME}-lb 2>/dev/null || echo "LoadBalancer服务未配置"

                            echo "=== 检查端点 ==="
                            kubectl get endpoints ${DEPLOYMENT_NAME}

                            echo "=== 获取Pod进行健康检查 ==="
                            POD_NAME=$(kubectl get pods -l app=${DEPLOYMENT_NAME} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

                            if [ -n "$POD_NAME" ]; then
                                echo "测试Pod: $POD_NAME"

                                # 等待Pod就绪
                                kubectl wait --for=condition=ready pod/$POD_NAME --timeout=120s

                                # 测试健康检查端点
                                echo "=== 测试健康检查端点 ==="
                                kubectl exec $POD_NAME -- curl -f http://localhost:8080/actuator/health

                                echo "✅ 健康检查通过"
                            else
                                echo "❌ 未找到可用的Pod"
                                exit 1
                            fi
                        '''
                    } catch (Exception e) {
                        echo "⚠️ 自动验证失败，请手动检查部署状态"
                    }
                }
            }
        }

        stage('烟雾测试') {
            steps {
                echo '🧪 执行烟雾测试...'
                script {
                    try {
                        sh '''
                            echo "=== 通过Service测试接口 ==="
                            SERVICE_IP=$(kubectl get svc ${DEPLOYMENT_NAME} -o jsonpath='{.spec.clusterIP}')
                            echo "Service IP: $SERVICE_IP"

                            # 创建临时Pod进行测试
                            echo "=== 创建测试Pod ==="
                            kubectl run test-pod-${BUILD_NUMBER} --image=curlimages/curl:latest --rm -i --restart=Never -- \
                                curl -f -m 10 http://${DEPLOYMENT_NAME}.${K8S_NAMESPACE}.svc.cluster.local/hello

                            echo "✅ 烟雾测试通过"

                            # 测试限流接口
                            echo "=== 测试限流功能 ==="
                            kubectl run test-ratelimit-${BUILD_NUMBER} --image=curlimages/curl:latest --rm -i --restart=Never -- \
                                sh -c 'for i in $(seq 1 5); do echo "Request $i:"; curl -f http://hello-service.default.svc.cluster.local/hello; echo; done'

                            echo "✅ 限流测试完成"
                        '''
                    } catch (Exception e) {
                        echo "⚠️ 烟雾测试失败，可能需要手动验证"
                    }
                }
            }
        }
    }

    post {
        always {
            echo '🏁 CD流水线执行完成'
            // 清理临时文件
            sh 'rm -f deployment-updated.yaml || true'

            // 显示部署信息
            sh '''
                echo "=== 部署摘要 ==="
                echo "部署镜像: ${FULL_IMAGE_NAME:-${DOCKER_REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}}"
                echo "命名空间: ${K8S_NAMESPACE}"
                echo "部署名称: ${DEPLOYMENT_NAME}"
                echo "项目目录: ${PROJECT_DIR}"
                echo "====================="
            '''
        }
        success {
            echo '🎉 CD流水线执行成功！应用部署完成'
            echo "📁 如果无法自动部署，部署文件已归档，可手动执行"
        }
        failure {
            echo '❌ CD流水线执行失败！'
            echo "📋 请检查kubeconfig配置或手动部署"
        }
    }
}