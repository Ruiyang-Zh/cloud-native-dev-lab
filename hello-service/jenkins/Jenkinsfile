pipeline {
    agent any

    environment {
        // 镜像仓库配置
        DOCKER_REGISTRY = '172.22.83.19:30003'
        IMAGE_NAMESPACE = 'nju14'
        IMAGE_NAME = 'hello-service'
        IMAGE_TAG = "${BUILD_NUMBER}"
        FULL_IMAGE_NAME = "${DOCKER_REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}"
        LATEST_IMAGE_NAME = "${DOCKER_REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:latest"
        PROJECT_DIR = "hello-service"
    }

    stages {
        stage('拉取代码') {
            steps {
                echo '开始拉取代码...'
                checkout scm
                echo '代码拉取完成'
            }
        }

        stage('代码检查') {
            steps {
                echo '检查项目结构...'
                sh '''
                    echo "=== 根目录文件结构 ==="
                    ls -la

                    echo "=== 项目目录文件结构 ==="
                    ls -la ${PROJECT_DIR}/

                    echo "=== 检查Dockerfile ==="
                    cat ${PROJECT_DIR}/Dockerfile

                    echo "=== 检查pom.xml ==="
                    cat ${PROJECT_DIR}/pom.xml | head -20
                '''
            }
        }

        stage('构建和测试Docker镜像') {
            steps {
                echo '开始Docker构建（包含编译、测试、打包）...'
                script {
                    dir("${PROJECT_DIR}") {
                        def image = docker.build("${FULL_IMAGE_NAME}")
                        echo "镜像构建完成: ${FULL_IMAGE_NAME}"

                        // 打上latest标签
                        sh "docker tag ${FULL_IMAGE_NAME} ${LATEST_IMAGE_NAME}"
                        echo "latest标签添加完成"
                    }
                }
            }
        }

        stage('镜像安全扫描') {
            steps {
                echo '执行基础镜像检查...'
                sh '''
                    # 检查镜像大小和基本信息
                    docker images ${FULL_IMAGE_NAME}
                    docker inspect ${FULL_IMAGE_NAME} | grep -E '"Size"|"Architecture"|"Os"'
                    echo "镜像检查完成"
                '''
            }
        }

        stage('推送Docker镜像') {
            steps {
                echo '开始推送Docker镜像到仓库...'

                withCredentials([usernamePassword(
                    credentialsId: '79fa236b-bc0e-4a27-adc9-31c62a76dcdc',
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        echo "正在登录Docker仓库..."
                        echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} -u "${DOCKER_USERNAME}" --password-stdin

                        echo "开始推送镜像..."
                        docker push ${FULL_IMAGE_NAME}
                        docker push ${LATEST_IMAGE_NAME}

                        echo "清理登录信息..."
                        docker logout ${DOCKER_REGISTRY}
                    '''
                }

                echo "镜像推送完成"
                echo "推送的镜像: ${FULL_IMAGE_NAME}"
                echo "推送的镜像: ${LATEST_IMAGE_NAME}"
            }
        }

        stage('清理本地镜像') {
            steps {
                echo '清理本地Docker镜像...'
                sh '''
                    # 删除刚构建的镜像
                    docker rmi ${FULL_IMAGE_NAME} || true
                    docker rmi ${LATEST_IMAGE_NAME} || true

                    # 清理构建缓存和悬空镜像
                    docker image prune -f || true

                    echo "本地镜像清理完成"
                '''
            }
        }

        stage('触发部署') {
            steps {
                echo '触发CD流水线...'
                script {
                    // 触发CD流水线，传递镜像信息
                    build job: 'hello-service-cd',
                          parameters: [
                              string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}"),
                              string(name: 'FULL_IMAGE_NAME', value: "${FULL_IMAGE_NAME}")
                          ],
                          wait: false
                }
                echo 'CD流水线触发完成'
            }
        }
    }

    post {
        always {
            echo 'CI流水线执行完成'
            // 显示构建摘要
            sh '''
                echo "=== 构建摘要 ==="
                echo "构建号: ${BUILD_NUMBER}"
                echo "Git提交: ${GIT_COMMIT}"
                echo "构建镜像: ${FULL_IMAGE_NAME}"
                echo "项目目录: ${PROJECT_DIR}"
                echo "====================="
            '''
        }
        success {
            echo 'CI流水线执行成功！'
            echo "✅ 镜像已成功推送到仓库: ${FULL_IMAGE_NAME}"
        }
        failure {
            echo 'CI流水线执行失败！'
            sh '''
                echo "❌ 构建失败，检查Docker状态："
                docker ps -a | head -5
                docker images | head -5
                echo "检查磁盘空间："
                df -h
                echo "检查项目目录："
                ls -la ${PROJECT_DIR}/ || echo "项目目录不存在"
            '''
        }
        cleanup {
            // 确保清理工作空间
            cleanWs()
        }
    }
}